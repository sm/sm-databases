#!/bin/sh

riak_initialize()
{
  package_dependencies=(erlang git)

  case "${OSTYPE}" in
    darwin*) # Account for Lion's clang default.
      if [[ "$(sw_vers -productVersion)" == "10.7" ]]
      then
        export CC="/usr/bin/gcc-4.2"
      fi
      ;;
  esac

  build_command="make rel"
}

riak_prefetch()
{
  package define \
    base_url "http://downloads.basho.com/riak/riak-${package_version%.*}" \
    target_path "${prefix_path}/${package_name}-${package_version/%-*}"
}

riak_install()
{
  (
  paths enter rel/riak
  directories=($(find . -mindepth 1 -maxdepth 1 -type d))
  paths copy to "${install_path}/" "${directories[@]}"
  )

  (
  paths enter rel/files

  files copy to "/etc/${package_name}" app.config  vm.args
  files copy to "${install_path}/bin" riak riak-admin

  erts_path="$(find "${install_path}/" -mindepth 1 -maxdepth 1 -iname "erts-*" -type d)"

  files copy to "${erts_path}/bin" nodetool erl
  )
}

riak_initdb()
{
  log "Initializing riak data directory in $data_path"

  paths create "${data_path%\/*}"

  paths chown recursive "$package_user" "${data_path%\/*}"

  # TODO: how do you initialize a riak DB?
  command="${install_path}/bin/riak --user=\"${package_user}\" --basedir=\"${install_path}\" --datadir=${data_path} "

  export PATH="${install_path}/bin:$PATH"

  if user is root
  then
    command run as "${package_user}" "${command}"
  else
    "${command}"
  fi
}

riak_configure()
{
  true
}

riak_postinstall()
{
  riak_initdb

  local file

  log "Configuring ${package_name} server."

  link --force "${data_path}" to "${data_path%\/*}/data"

  # TODO: Determine which .cnf file to grab based on system resources.
  file="${source_path}/${package_dir}/rel/riak/etc/app.config"
  if file_is_nonempty "${file}"
  then
    log "Installing ${file//*\/} to /etc/${package_name}"
    cp -f "${file}" "/etc/${package_name}/${file//*\/}"
  else
    log "WARNING: ${file} missing, not setting up /etc/${package_name}/${file//*\/}"
  fi

  file="${source_path}/${package_dir}/rel/riak/etc/vm.args"
  if file_is_nonempty "${file}"
  then
    log "Installing ${file//*\/} to /etc/${package_name}"
    cp -f "${file}" "/etc/${package_name}/${file//*\/}"
  else
    log "WARNING: ${file} missing, not setting up /etc/${package_name}/${file//*\/}"
  fi

  log "\nSymlinking $install_path to $prefix_path/${package_name}"

  paths remove "$prefix_path/${package_name}"

  link "$install_path" to "$prefix_path/${package_name}"

  paths create "$data_path" "$log_path" "/etc/${package_name}/"

  paths chown recursive "$package_user" "$data_path"

  paths chmod recursive 0700 "$data_path"
}

riak_init_script()
{
  log "Installing ${package_name} init script"
  install_template "riak/riak" \
    to "${init_scripts_path}/${package_name}"

  ensure_files_are_executable "${init_scripts_path}/${package_name}"

  paths chmod recursive 0755 "${init_scripts_path}/${package_name}"
}

riak_profile_d()
{
  if user is root && os is linux
  then
    log "Installing ${package_name} profile.d script"

    install_template "riak/riak.sh" \
      to "/etc/profile.d/${package_name}.sh" \
      mode 0755
  fi
}

riak_conf_d()
{
  if user is root && os is linux
  then
    log "Installing ${package_name} conf.d script"

    install_template "riak/riak.conf.d" \
      to "/etc/conf.d/${package_name}.conf" \
      mode 0644
  fi
}
