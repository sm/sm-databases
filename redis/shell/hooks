#!/bin/sh

redis_initialize()
{
  typeset -g service_port service_bind_interface service_binary service_cli_binary service_db_file
  typeset -ga service_flags
  # Redis Configuration.
  true ${service_port:=6379} ${service_bind_interface:="127.0.0.1"}

  service_binary="${active_path}/bin/redis-server"
  service_cli_binary="${active_path}/bin/redis-cli"
  service_db_file="${service_db_path}/active/redis.rdb"

  service_flags+=( "${service_config_file}" )
}

redis_install()
{
  local _source="src/" _major _minor _patch

  _major=${package_version//.*}
  # _patch=${package_version//*.}
  _minor=${package_version%.*}
  _minor=${_minor#*.}

  if (( _major >= 2 ))
  then
    if ! (( _major = 2 && _minor >= 2 ))
    then
      _source=""
    fi
  else
    _source=""
  fi

  # TODO: Install to install_path
  paths create "${install_path}/bin"

  log "#installing ${package_name} ${package_version}...\n"
  for file in redis-server redis-cli
  do
    if ! install -b "${_source}${file}" "${install_path}/bin/${file}"
    then
      fail "${package_name} ${package_version} failed to install (specifically ${file}).\n"
    fi
  done
}

redis_service_setup()
{
  path create "${service_log_path}"

  if file is nonempty "${service_config_file}"
  then
    log "${service_config_file} already exists, not overwriting."
  else
    __sm.package.init

    log "#installing redis.conf file to ${service_config_file}"

    paths create "${service_config_path}"

    sed -e "s#pidfile .*\$#pidfile ${service_pid_file}#" \
        -e "s#logfile .*\$#logfile ${service_log_file}#" \
        -e "s#dir .*\$#dir ${service_db_path}/active#" \
        -e "s#^.*daemonize .*\$#daemonize yes#" \
        -e "s#dbfilename .*\$#dbfilename ${service_db_file}#" \
        -e "s#port .*\$#port ${service_port}#" \
        -e "s#bind .*\$#bind ${service_bind_interface}#" \
      "${source_path}/${package_dir}/redis.conf" > "${service_config_file}"

    path chown "$service_user" recursive "${service_config_path}"
  fi

  return 0
}

redis_status()
{
  log "  pidfile: $(awk '/^pidfile/{print $2}' ${service_config_file})"
  log "  logfile: $(awk '/^logfile/{print $2}' ${service_config_file})"
  log "  dbfile: $(awk '/^dbfilename/{print $2}' ${service_config_file})"
}

